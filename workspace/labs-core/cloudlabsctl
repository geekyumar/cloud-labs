#! /opt/homebrew/bin/php

<?php

include '/opt/homebrew/websites/labs/htdocs/src/main.php';

function displayUsage(){
    echo "cloudlabsctl - A Command line utility tool that manages the cloud labs.\n\nDeveloped by Umar Farooq\n\nUsage: cloudlabsctl <action> <username> <instance_id>\n\ndeploy: deploys a server instance for the specified user.\nredeploy: kills the server instance currently running and deploys the instance afresh.\nstop: stops the running instance.\n\n";
}

$arg_no = $_SERVER['argc'];
$env_cmd = get_config('env_cmd');

if($arg_no == 1){
    displayUsage();
    if(wg::vpnStatus() == true){
        echo "Wireguard Status: Active\n\n";
    }else{
        echo "Wireguard Status: Not Active\n";
    }
}

if($arg_no == 2){

    $action = $_SERVER['argv'][1];

    if($action == 'deploy'){
        echo "deploy: missing argument <username>";
    }

    else if($action == 'redeploy'){
        echo "redeploy: missing argument <username>";
    }

    else if($action == 'stop'){
        echo "stop: missing argument <username>";
    }

    else{
        echo "Invalid argument: $action\nUsage: cloudlabsctl <action> <username>\n";
        exit(1);
    }
}

if($arg_no == 3){

    $action = $_SERVER['argv'][1];
    $action_array = ['deploy', 'redeploy', 'stop'];
    $username = $_SERVER['argv'][2];
    
    if(!in_array($action, $action_array)){
        echo "Invalid argument: $action";
        exit(1);
    }

    if(user::isUser($username)){
        if(labs::isCreated($username)){
            echo "The user '$username' is registered has lab instance created.";
        }else{
            echo "The user '$username' is registered, but lab instance is not created.";
            exit(1);
        }
    }else{
        echo "'$username' - no such user";
        exit(1);
    }
}

if($arg_no == 4){
    $action = $_SERVER['argv'][1];
    $action_array = ['deploy', 'redeploy', 'stop'];
    $username = $_SERVER['argv'][2];
    $instance_id = $_SERVER['argv'][3];

    // Validating action parameter

    if(!in_array($action, $action_array)){
        echo "Invalid argument: $action";
        exit(1);
    }

    // Validating user parameter

    if(user::isUser($username)){
        if(labs::isCreated($username)){
            echo "The user '$username' is registered has lab instance created.\n";
        }else{
            echo "The user '$username' is registered, but lab instance is not created.";
            exit(1);
        }
    }else{
        echo "'$username' - no such user";
        exit(1);
    }

    if(sanitizeInput($instance_id) !== true){
        echo "Instance ID has unnessasary characters!";
        exit(1);
    }

    $labs = new labs($instance_id, $username);
        if($labs->instance){

            $labs_storage = get_config('labs_storage') . $username;
            $private_ip = $labs->instance['private_ip'];

            switch($action){
                case 'deploy':
                    if(labs::labStatus($instance_id, $username) == true){
                        echo "the instance is already running!";
                        exit(1);
                    }
                    
                    $deploy_cmd = system($env_cmd . "docker run -d --name $username --privileged -v $labs_storage/wireguard_conf/:/etc/wireguard/ --network=labs-core_my-network --ip=$private_ip labs-sample", $return_var);
                    if($return_var == 0){
                        if($labs->updateContainerStatus($instance_id, $username, 1) == true){
                            echo "Container Deployed!";
                        }
                    }
                    else{
                        echo "error in deploying container or container is already running..";
                        exit(1);
                    }
                    break;

                case 'redeploy':

                    if(labs::labStatus($instance_id, $username) !== true){
                        echo "the instance is not running already!";
                        exit(1);
                    }

                    $force_stop_cmd = system($env_cmd . "docker rm --force $username", $result);
                    if($result == 0){
                        $labs->updateContainerStatus($instance_id, $username, 0);
                        echo "Container stopped!";

                        $redeploy_cmd = system($env_cmd . "docker run -d --name $username --privileged -v $labs_storage/wireguard_conf/:/etc/wireguard/ --network=labs-core_my-network --ip=$private_ip labs-sample", $return_var);
                        if($return_var == 0){
                            if($labs->updateContainerStatus($instance_id, $username, 1) == true){
                            echo "Container Deployed!";
                        }else{
                            echo "Redeployed but Error updating status to db";
                        }
                        }else{
                            echo "error in redeploying";
                            exit(1);
                        }
                    }else{
                        echo "error in force removing the container";
                        exit(1);
                    }

                    break;

                case 'stop':

                    if(labs::labStatus($instance_id, $username) !== true){
                        echo "the instance is not running already!";
                        exit(1);
                    }

                    $force_stop_cmd = system($env_cmd . "docker rm --force $username", $result);
                    if($result == 0){
                        if($labs->updateContainerStatus($instance_id, $username, 0) == true){
                            echo "Instance Stopped!";
                        }else{
                            echo "Stopping instance failed!";
                            exit(1);
                        }
                    }else{
                        echo "error in stopping the container";
                        exit(1);
                    }

                    break;

                default:
                    echo "error";
                    break;
            }
        }
        else{
            echo "Instance ID mismatch with username";
            exit(1);
        }

}
