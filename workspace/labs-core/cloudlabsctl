#! /usr/bin/php

<?php

include '/var/www/labs/htdocs/src/main.php';

function displayUsage(){
    echo "cloudlabsctl - A Command line utility tool that manages the cloud labs.\n\nDeveloped by Umar Farooq\n\nUsage: cloudlabsctl <action> <username> <instance_id>\n\ndeploy: deploys a server instance for the specified user.\nredeploy: kills the server instance currently running and deploys the instance afresh.\nstop: stops the running instance.\nup: starts the core cloud labs\ndown: stops the core cloud labs forcefully (use it with risk!)\n\n";
}

function wireguardStatus(){ 
if(wg::vpnStatus() !== true){
    echo "Wirreguard Server is down! start wireguard and try again.\n";
    exit(1);
}
}

$arg_no = $_SERVER['argc'];
$env_cmd = get_config('env_cmd');
$action_array = ['deploy', 'redeploy', 'stop', 'stats', 'backup'];

if($arg_no == 1){
    displayUsage();
    if(wg::vpnStatus() == true){
        echo "Wireguard Status: Active\n\n";
    }else{
        echo "Wireguard Status: Not Active\n";
    }
}

if($arg_no == 2){

    $action = $_SERVER['argv'][1];
    $app_root = get_config('app_root');

    if($action == in_array($action, $action_array)){
        if($action == 'backup'){
            echo "cloudlabsctl data backup\nusage: \n\n backup mysql-service (takes backup of complete mysql service and dumps in /var/www/labs/workspace/backup/mysql-service)\n backup mysql-app (takes backup of entire app data (mysql) and dumps in /var/www/labs/workspace/backup/mysql-app)\n\n";
            exit(1);
        }
        echo "$action: missing argument <username> <instance_id>\n\n";
        exit(1);
    } else {
        echo "Invalid argument: $action\n";
        exit(1);
    }

    // if($action == 'deploy'){
    //     echo "deploy: missing argument <username> <instance_id>\n";
    // }

    // else if($action == 'redeploy'){
    //     echo "redeploy: missing argument <username> <instance_id>\n";
    // }

    // else if($action == 'stop'){
    //     echo "stop: missing argument <username> <instance_id>\n";
    // }

    // else if($action == 'stats'){
    //     echo "stats: missing argument <username> <instance_id>\n";
    // }

    // else if($action == 'up'){
    //     echo "Starting Cloud Labs...\n";
    //     system($env_cmd . "docker compose -f $app_root/workspace/labs-core/docker-compose.yaml up -d", $ret_var);
    //     if($ret_var == 0){
    //         echo "Started!\n";
    //     }else{
    //         echo "Starting Cloud Labs failed with error code $ret_var!\n";
    //         exit(1);
    //     }
       
    // }

    // else if($action == 'down'){
    //     echo "Stopping Cloud Labs...\n";
    //     system($env_cmd . 'docker rm --force  $(docker ps -q) && ' . $env_cmd . "docker compose -f $app_root/workspace/labs-core/docker-compose.yaml down", $ret_var);
    //     if($ret_var == 0){
    //         echo "Stopped!\n";
    //     }else{
    //         echo "Stopping Cloud Labs failed with error code $ret_var!\n";
    //         exit(1);
    //     }
    // }



}

if($arg_no == 3){

    if($_SERVER['argv'][1] == 'backup'){
        $backup_type = $_SERVER['argv'][2];
        $app_root = get_config('app_root');

        if($backup_type == 'mysql-service'){
            echo "Taking backup of mysql service...\n";
            if(mysql::backup() == true){
                echo "Backup taken successfully!\n\n";
                exit(1);
            }else{
                echo "Backup failed!";
                exit(1);
            }
        } else if($backup_type == 'mysql-app'){
            echo "Taking backup of mysql app...\n";
            if(mysqlAppBackup() == true){
                echo "Backup taken successfully!\n\n";
                exit(1);
            }else{
                echo "Backup failed!";
                exit(1);
            }
        }
        else{
            echo "Invalid backup type: $backup_type\n";
            exit(1);
        }
    }   

    $action = $_SERVER['argv'][1];
    $username = $_SERVER['argv'][2];
    
    if(!in_array($action, $action_array)){
        echo "Invalid argument: $action";
        exit(1);
    }

    if(user::isUser($username)){
        if(labs::isCreated($username)){
            echo "The user '$username' is registered has lab instance created.\n\n";
        }else{
            echo "The user '$username' is registered, but lab instance is not created.\n\n";
            exit(1);
        }
    }else{
        echo "'$username' - no such user\n\n";
        exit(1);
    }
}

if($arg_no == 4){

    wireguardStatus();

    $action = $_SERVER['argv'][1];
    $username = $_SERVER['argv'][2];
    $instance_id = $_SERVER['argv'][3];

    // Validating action parameter

    if(!in_array($action, $action_array)){
        echo "Invalid argument: $action";
        exit(1);
    }

    // Validating user parameter

    if(user::isUser($username)){
        if(!labs::isCreated($username)){
            echo "The user '$username' is registered, but lab instance is not created.";
            exit(1);
        }
    }else{
        echo "'$username' - no such user";
        exit(1);
    }

    if(sanitizeInput($instance_id) !== true){
        echo "Instance ID has unnessasary characters!";
        exit(1);
    }

    $labs = new labs($instance_id, $username);
        if($labs->instance){

            $labs_storage = get_config('labs_storage') . $username;
            $private_ip = $labs->instance['private_ip'];

            $container_cpu_cores = get_config('container_cpu_cores');
            $container_memory_space = get_config('container_memory_space');

            switch($action){
                case 'deploy':
                    if($labs->labStatus($instance_id, $username) == true){
                        echo "the instance is already running!";
                        exit(1);
                    }
                    
                    $deploy_cmd = system($env_cmd . "docker run -d --name $username --privileged \
                     -v $labs_storage/wireguard_conf/:/etc/wireguard/ \
                     -v $labs_storage/home/:/home/$username \
                      --network=cloud-labs \
                      --ip=$private_ip --hostname cloud-labs labs-sample sh -c '/root/init.sh $username'", $return_var);

                    if($return_var == 0){
                        if($labs->updateContainerStatus($instance_id, $username, 1) == true){
                            echo "Container Deployed!";
                        }else{
                            echo "container deployed, but update status failed!";
                            exit(1);
                        }
                    }
                    else{
                        echo "error in deploying container or container is already running..";
                        exit(1);
                    }
                    break;

                case 'redeploy':

                    if($labs->labStatus($instance_id, $username) !== true){
                        echo "the instance is not running already!";
                        exit(1);
                    }

                    $force_stop_cmd = system($env_cmd . "docker rm --force $username", $result);
                    if($result == 0){
                        $labs->updateContainerStatus($instance_id, $username, 0);
                        echo "Container stopped!";

                    $redeploy_cmd = system($env_cmd . "docker run -d --name $username --privileged \
                     -v $labs_storage/wireguard_conf/:/etc/wireguard/ \
                     -v $labs_storage/home/:/home/$username \
                      --network=cloud-labs \
                      --ip=$private_ip --hostname cloud-labs labs-sample sh -c '/root/init.sh $username'", $return_var);

                        if($return_var == 0){
                            if($labs->updateContainerStatus($instance_id, $username, 1) == true){
                            echo "Container Deployed!";
                        }else{
                            echo "Redeployed but Error updating status to db";
                        }
                        }else{
                            echo "error in redeploying";
                            exit(1);
                        }
                    }else{
                        echo "error in force removing the container";
                        exit(1);
                    }

                    break;

                case 'stop':

                    if($labs->labStatus($instance_id, $username) !== true){
                        echo "the instance is not running already!";
                        exit(1);
                    }

                    $force_stop_cmd = system($env_cmd . "docker rm --force $username", $result);
                    if($result == 0){
                        if($labs->updateContainerStatus($instance_id, $username, 0) == true){
                            echo "Instance Stopped!";
                        }else{
                            echo "Stopping instance failed!";
                            exit(1);
                        }
                    }else{
                        echo "error in stopping the container";
                        exit(1);
                    }

                    break;


                    case 'stats':

                        if($labs->labStatus($instance_id, $username) !== true){
                            echo "the instance is not running!";
                            exit(1);
                        }
    
                        $force_stop_cmd = system($env_cmd . "docker stats --no-stream --format json $username", $result);
                        if($result == 0){
                            return 0;
                        }else{
                            echo "error in stopping the container";
                            exit(1);
                        }
    
                        break;

                default:
                    echo "error";
                    break;
            }
        }
        else{
            echo "Instance ID mismatch with username";
            exit(1);
        }

}
